
def set_line_impedance_from_linetypess(n: Network, config: dict):

    Z_base = n.lines['v_nom'] ** 2 / config["M_base"]
    num_parallel = n.lines['num_parallel'].replace(0, 1)  # to avoid math problems

    # parameters
    l = n.lines["length"]  # [km]
    ll = n.lines.iloc[:, 4].astype(int)

    for i, line in n.lines.iterrows():
        ll = int(line.iloc[4])
        v_nom = float(line["v_nom"])
        num_parallel = n.lines.iloc[:, 3].astype(int)

        if (num_parallel == 0).any():
            num_parallel[num_parallel == 0] = 1

        if (ll > 250) and v_nom == 400.0:
            r_per_length = 0.018 / num_parallel
            x_per_length = 0.277 / num_parallel
            #b_per_length = 0.013 * 0.001 * num_parallel
            n.lines.loc[i, "s_nom"] = 1719 * 0.7

            b_per_length = (  # [S/km]
                    2 * np.pi * n.lines["type"].map(n.line_types.f_nom)
                    * n.lines["type"].map(n.line_types.c_per_length) * 1e-9
                    * num_parallel
            )
            g_per_length = 0

            z_per_length = r_per_length + 1j * x_per_length  # [Ohm/km]
            y_per_length = g_per_length + 1j * b_per_length  # [S/km]

            z_medium = z_per_length * ll
            y_medium = y_per_length * ll

            gamma = (z_per_length * y_per_length)**(1/2)  # [1/m]

            f1 = (gamma * l).map(lambda gamma_l: sinh(gamma_l) / gamma_l)            # correction factor [p.u.]
            f2 = (gamma * l).map(lambda gamma_l: tanh(gamma_l / 2) / (gamma_l / 2))  # correction factor [p.u.]

            z_long = z_medium * f1
            y_long = y_medium * f2

            n.lines["r"] = np.real(z_long)
            n.lines["x"] = np.imag(z_long)

            n.lines["g"] = np.real(y_long)
            n.lines["b"] = np.imag(y_long)

            n.lines["r_pu"] = n.lines["r"] / Z_base
            n.lines["x_pu"] = n.lines["x"] / Z_base
            n.lines["g_pu"] = n.lines["g"] * Z_base
            n.lines["b_pu"] = n.lines["b"] * Z_base

        elif v_nom == 400.00:
            r_per_length = 0.018 / num_parallel
            x_per_length = 0.277 / num_parallel
            #b_per_length = 0.013 * 0.001 * num_parallel
            n.lines.loc[i, "s_nom"] = 1719 * 0.7
            b_per_length = (  # [S/km]
                     2 * np.pi * n.lines["type"].map(n.line_types.f_nom)
                     * n.lines["type"].map(n.line_types.c_per_length) * 1e-9
                     * num_parallel
            )
            g_per_length = 0  # [S/km]
            z_per_length = r_per_length + 1j * x_per_length  # [Ohm/km]
            y_per_length = g_per_length + 1j * b_per_length  # [S/km]

            z_medium = z_per_length * ll
            y_medium = y_per_length * ll

            n.lines["r"] = np.real(z_medium)
            n.lines["x"] = np.imag(z_medium)

            n.lines["g"] = np.real(y_medium)
            n.lines["b"] = np.imag(y_medium)

            n.lines["r_pu"] = n.lines["r"] / Z_base
            n.lines["x_pu"] = n.lines["x"] / Z_base
            n.lines["g_pu"] = n.lines["g"] * Z_base
            n.lines["b_pu"] = n.lines["b"] * Z_base
        elif v_nom == 300.00:
            r_per_length = 0.018 / num_parallel
            x_per_length = 0.277 / num_parallel
            #b_per_length = 0.013 * 0.001 * num_parallel
            n.lines.loc[i, "s_nom"] = 1719 * 0.7
            b_per_length = (  # [S/km]
                    2 * np.pi * n.lines["type"].map(n.line_types.f_nom)
                    * n.lines["type"].map(n.line_types.c_per_length) * 1e-9
                    * num_parallel
            )
            g_per_length = 0  # [S/km]
            z_per_length = r_per_length + 1j * x_per_length  # [Ohm/km]
            y_per_length = g_per_length + 1j * b_per_length  # [S/km]

            z_medium = z_per_length * ll
            y_medium = y_per_length * ll

            n.lines["r"] = np.real(z_medium)
            n.lines["x"] = np.imag(z_medium)

            n.lines["g"] = np.real(y_medium)
            n.lines["b"] = np.imag(y_medium)

            n.lines["r_pu"] = n.lines["r"] / Z_base
            n.lines["x_pu"] = n.lines["x"] / Z_base
            n.lines["g_pu"] = n.lines["g"] * Z_base
            n.lines["b_pu"] = n.lines["b"] * Z_base

        else:
            r_per_length = 0.026 / num_parallel
            x_per_length = 0.33 / num_parallel
            #b_per_length = 0.011 * 0.001 * num_parallel
            n.lines.loc[i, "s_nom"] = 1146 * 0.7
            b_per_length = (  # [S/km]
                    2 * np.pi * n.lines["type"].map(n.line_types.f_nom)
                    * n.lines["type"].map(n.line_types.c_per_length) * 1e-9
                    * num_parallel
            )
            g_per_length = 0  # [S/km]
            z_per_length = r_per_length + 1j * x_per_length  # [Ohm/km]
            y_per_length = g_per_length + 1j * b_per_length  # [S/km]

            z_medium = z_per_length * l
            y_medium = y_per_length * l

            n.lines["r"] = np.real(z_medium)
            n.lines["x"] = np.imag(z_medium)

            n.lines["g"] = np.real(y_medium)
            n.lines["b"] = np.imag(y_medium)

            n.lines["r_pu"] = n.lines["r"] / Z_base
            n.lines["x_pu"] = n.lines["x"] / Z_base
            n.lines["g_pu"] = n.lines["g"] * Z_base
            n.lines["b_pu"] = n.lines["b"] * Z_base

            #else:
            #    print("else")
            #    r_per_length = n.lines["type"].map(n.line_types.r_per_length) / num_parallel  # [Ohm/km]
            #    x_per_length = n.lines["type"].map(n.line_types.x_per_length) / num_parallel  # [Ohm/km]
